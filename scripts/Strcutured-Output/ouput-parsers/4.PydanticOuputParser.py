import os
import sys
from langchain.output_parsers import PydanticOutputParser
from langchain_core.prompts import PromptTemplate
from pydantic import BaseModel, Field

# Add project root to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))
from utils.load_llms import load_gemma

# Load the model
model = load_gemma()

# Define Pydantic model for movie details
class Person(BaseModel):
    title: str = Field(description="Name of the Movie")
    imdb_score: float = Field(gt=0, lt=10, description='IMDB score of the movie')
    budget: int = Field(description='Budget taken to make the movie')
    revenue: int = Field(description='Revenue generated by the movie')
    director: str = Field(description='Name of the director of the movie')
    runtime: int = Field(description='Runtime in minutes of the movie')

# Initialize Pydantic parser
parser = PydanticOutputParser(pydantic_object=Person)

# Prompt template with format instructions
template = PromptTemplate(
    template="""
    Give me plain JSON values for the movie '{title}' with this format:
    {format_instruction}

    Return **only the JSON object with keys and values**, no extra 'properties', 'description', or 'type'.
    """,
    input_variables=['title'],
    partial_variables={'format_instruction': parser.get_format_instructions()}
)

# Generate prompt with movie title
prompt = template.invoke({'title': 'The Shawshank Redemption'})

# Get model response
result = model.invoke(prompt)

# Parse response into Pydantic model
final_result = parser.parse(result.content)

# Print structured result
print(final_result)
